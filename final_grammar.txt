<program> ---- <moduleDeclarations> <otherModules> <driverModule> <otherModules>
<moduleDeclarations> ---- <moduleDeclaration> <moduleDeclarations> | ε
<moduleDeclaration> ---- DECLARE MODULE ID SEMICOL
<otherModules> ---- <module> <otherModules> | ε
<driverModule> ---- DRIVERDEF DRIVER PROGRAM DRIVERENDDEF <moduleDef>
<module> ---- DEF MODULE ID ENDDEF TAKES INPUT SQBO <input_plist> SQBC SEMICOL <ret> <moduleDef>
<ret> ---- RETURNS SQBO <output_plist> SQBC SEMICOL | ε
<input_plist> ---- ID COLON <dataType> <input_plist2>
<input_plist2> ---- COMMA ID COLON <dataType> <input_plist2> | ε
<output_plist> ---- ID COLON <type> <output_plist2>
<output_plist2> ---- COMMA ID COLON <type> <output_plist2> | ε
<dataType> ---- INTEGER | REAL | BOOLEAN | ARRAY SQBO <range1> SQBC OF <type>
<type> ---- INTEGER | REAL | BOOLEAN
<moduleDef> ---- START <statements> END
<statements> ---- <statement> <statements> | ε
<statement> ---- <ioStmt> | <simpleStmt> | <declareStmt> | <conditionalStmt> | <iterativeStmt>
<ioStmt> ---- GET_VALUE BO ID BC SEMICOL | PRINT BO <varAndBool> BC SEMICOL
<varAndBool> ---- <var> | <boolConst>
<var> ---- ID <whichId> | NUM | RNUM
<whichId> ---- SQBO <index> SQBC | ε
<simpleStmt> ---- <assignmentStmt> | <moduleReuseStmt>
<assignmentStmt> ---- ID <whichStmt>
<whichStmt> ---- <lvalueIDStmt> | <lvalueARRStmt>
<lvalueIDStmt> ---- ASSIGNOP <expression> SEMICOL
<lvalueARRStmt> ---- SQBO <index> SQBC ASSIGNOP <expression> SEMICOL
<index> ---- NUM | ID
<moduleReuseStmt> ---- <optional> USE MODULE ID WITH PARAMETERS <idList> SEMICOL
<optional> ---- SQBO <idList> SQBC ASSIGNOP | ε
<idList> ---- ID <idList2>
<idList2> ---- COMMA ID <idList2> | ε
<expression> ---- <expression2> | <unaryExprArithmetic> 
<expression2> ---- <logicalExpr> <expression3> | <boolConst> <expression3>
<expression3> ---- <logicalOp> <expression2> | ε
<logicalExpr> ---- <arithmeticExpr> <logicalExpr2>
<logicalExpr2> ---- <relationalOp> <arithmeticExpr> | ε
<arithmeticExpr> ---- <term> <arithmeticExpr2>
<arithmeticExpr2> ---- <op1> <term> <arithmeticExpr2> | ε
<term> ---- <factor> <term2>
<term2> ---- <op2> <factor> | ε
<factor> ----  BO <expression2> BC | <var>
<unaryExprArithmetic> ---- <op1> <myOptions>
<myOptions> ---- <var> | BO <arithmeticExprBoolnt> BC
<arithmeticExprBoolnt> ---- <termBoolnt> <arithmeticExpr2Boolnt>
<arithmeticExpr2Boolnt> ---- <op1> <termBoolnt> <arithmeticExpr2Boolnt> | ε
<termBoolnt> ---- <factorBoolnt> <term2Boolnt>
<term2Boolnt> ---- <op2> <factorBoolnt> | ε
<factorBoolnt> ---- BO <arithmeticExprBoolnt> BC | <var>
<op1> ---- PLUS | MINUS
<op2> ---- MUL | DIV
<relationalOp>  ---- LT | LE | GT | GE | EQ | NE
<logicalOp> ---- AND | OR
<boolConst> ---- TRUE | FALSE
<declareStmt> ---- DECLARE <idList> COLON <dataType> SEMICOL
<conditionalStmt> ---- SWITCH BO ID BC START <caseStmt> <default> END
<caseStmt> ---- CASE <value> COLON <statements> BREAK SEMICOL <caseStmts>
<caseStmts> ---- CASE <value> COLON <statements> BREAK SEMICOL <caseStmts> | ε
<value> ---- NUM | TRUE | FALSE
<default> ---- DEFAULT COLON <statements> BREAK SEMICOL | ε
<iterativeStmt> ---- FOR BO ID IN <range2> BC START <statements> END | WHILE BO <expression> BC START <statements> END
<range1> ---- NUM RANGEOP ID | ID RANGEOP <index>
<range2> ---- NUM RANGEOP NUM